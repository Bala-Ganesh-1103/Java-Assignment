import java.util.Stack;
////adjacent 
public class RemoveAdjacentDuplicates {
    public static String removeDuplicates(String s) {
        Stack<Character> stack = new Stack<>();

        for (char ch : s.toCharArray()) {
            if (!stack.isEmpty() && stack.peek() == ch)
                stack.pop(); 
            else
                stack.push(ch);
        }
        StringBuilder result = new StringBuilder();
        for (char ch : stack)
            result.append(ch);

        return result.toString();
    }

    public static void main(String[] args) {
        String input = "abbaca";
        String output = removeDuplicates(input);
        System.out.println("Input: " + input);
        System.out.println("Output: " + output); 
    }
}

/// stocks
import java.util.Stack;

public class StockSpan {
    public static int[] calculateSpan(int[] prices) {
        int n = prices.length;
        int[] span = new int[n];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && prices[stack.peek()] <= prices[i])
                stack.pop();

            span[i] = (stack.isEmpty()) ? (i + 1) : (i - stack.peek());
            stack.push(i);
        }

        return span;
    }

    public static void main(String[] args) {
        int[] prices = {100, 80, 60, 70, 60, 75, 85};
        int[] span = calculateSpan(prices);

        System.out.print("Span: ");
        for (int s : span) {
            System.out.print(s + " ");
        }
    }
}
///parenthesis
import java.util.Stack;

public class BalancedParentheses {
    public static boolean isBalanced(String str) {
        Stack<Character> stack = new Stack<>();

        for (char ch : str.toCharArray()) {
            if (ch == '(' || ch == '{' || ch == '[')
                stack.push(ch);
            else if (ch == ')' && !stack.isEmpty() && stack.peek() == '(')
                stack.pop();
            else if (ch == '}' && !stack.isEmpty() && stack.peek() == '{')
                stack.pop();
            else if (ch == ']' && !stack.isEmpty() && stack.peek() == '[')
                stack.pop();
            else
                return false; // Unmatched or wrong order
        }

        return stack.isEmpty(); // True if balanced
    }

    public static void main(String[] args) {
        String str1 = "((()))";
        String str2 = "(()";

        System.out.println(str1 + " → " + (isBalanced(str1) ? "Balanced" : "Not Balanced"));
        System.out.println(str2 + " → " + (isBalanced(str2) ? "Balanced" : "Not Balanced"));
    }
}


